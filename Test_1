#include <stdio.h>
#define MAXSIZE 4096

/**DON'T CHANGE MAIN                                         //DON'T JUST DESING IT TO FIT THE TEST CASES HE PROVIDED, COME UP WITH YOUR OWN
 * You can use this recommended helper function 
 * Returns true if partial_line matches pattern, starting from
 * the first char of partial_line.								//make clear and make checks to run 
 */

int matches_leading(char *partial_line, char *pattern) {		/*compare the characters in orderd to find the characters that are in the midlle

														//recursive */
  int j=0;
  while (pattern[j]!=0 && partial_line[j]!=0){
    if (pattern[j]==partial_line[j]){
      j++;
    }else{
      return 0;
    }
  }
  return 1;
}


int rgrep_matches(char *line, char *pattern) {		

int i=0;

while(line[i]!=0){
	if (matches_leading(line+i,pattern)){
	  return 1;
	}else{
	  i++;
	}
}

return 0;


} 

int main(int argc, char **argv) {	//way to send arguments to program
    if (argc != 2) {				
        fprintf(stderr, "Usage: %s <PATTERN>\n", argv[0]); //checking for errors 
        return 2;
    }

    /* we're not going to worry about long lines */
    char buf[MAXSIZE];		//array of charcters of a string 

    while (!feof(stdin) && !ferror(stdin)) {		
        if (!fgets(buf, sizeof(buf), stdin)) {
            break;
        }
        if (rgrep_matches(buf, argv[1])) {		//comparing one string with one pattern 
            fputs(buf, stdout);
            fflush(stdout);
        }
    }

    if (ferror(stdin)) {
        perror(argv[0]);
        return 1;
    }

    return 0;
}
